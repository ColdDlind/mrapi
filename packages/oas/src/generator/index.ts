import chalk from 'chalk'
import { join } from 'path'
import prettier from 'prettier'
import fs from 'fs-extra'

import { Generators } from '@mrapi/common'
import type { GeneratorOptions } from '@mrapi/common'

const pkg = require('../../package.json')

const intputBasePath = join(__dirname, '../../templates/api')

const pathsDir = {
  users: 'paths/users.js',
  userId: 'paths/users/{id}.js',
}

const definitionsTypes = '#{models}'

const test = `User: {
  type: 'object',
  properties: {
    email: {
      description: 'email',
      type: 'string'
    },
    id: {
      description: 'id',
      type: 'integer'
    },
    name: {
      description: 'name',
      type: 'string'
    }
    // Post: {
    // }
  },
  required: ['email', 'id']
},
Post: {
  type: 'object',
  properties: {
    content: {
      description: 'content',
      type: 'string'
    },
    authorId: {
      description: 'authorId',
      type: 'integer'
    },
    id: {
      description: 'id',
      type: 'integer'
    },
    title: {
      description: 'title',
      type: 'string'
    },
    published: {
      description: 'published',
      type: 'boolean'
    }
    // User: {
    // }
  },
  required: ['id', 'published', 'title']
}
`

export class OasGenerator extends Generators {
  protected options: GeneratorOptions = {
    schema: join(process.cwd(), 'node_modules', '@prisma/client'),
    output: join(process.cwd(), '.mrapi'),
    excludeFields: [],
    excludeModels: [],
    excludeFieldsByModel: {},
    excludeQueriesAndMutations: [],
    excludeQueriesAndMutationsByModel: {},
  }

  protected pathsFiles = {
    users: fs.readFileSync(join(intputBasePath, pathsDir.users), {
      encoding: 'utf8',
    }),
    userId: fs.readFileSync(join(intputBasePath, pathsDir.userId), {
      encoding: 'utf8',
    }),
  }

  constructor(customOptions?: GeneratorOptions) {
    super(customOptions)

    this.options = { ...this.options, ...customOptions }
  }

  async run() {
    const outputBasePath = this.options.output

    // build paths files
    for (const model in this.pathsFiles) {
      let str = this.pathsFiles[model]
      if (model === 'users') {
        str = str.replace('', '')
      } else if (model === 'userId') {
        str = str.replace('', '')
      }
      this.outputFile(str, join(outputBasePath, pathsDir[model]))
    }

    // build definitions.js
    this.outputFile(
      `exports.default = {
  Error: {
    additionalProperties: true
  },
  ${definitionsTypes}
}
`.replace(definitionsTypes, test),
      join(outputBasePath, 'definitions.js'),
    )

    console.log(chalk.green('\nâœ…  GenerateOAS run successful.\n'))
  }

  outputFile(content: string, outputPath: string) {
    fs.outputFileSync(
      outputPath,
      prettier.format(
        `
/**
* This file was generated by mrapi
* Do not make changes to this file directly
*/
${content}`,
        { ...pkg.prettier, parser: 'babel' },
      ),
    )
  }
}

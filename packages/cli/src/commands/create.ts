import { promises as fs } from 'fs'
import { join, dirname } from 'path'
import { pathExists, getNodeModules, getUrlAndProvider } from '@mrapi/common'

export default async (options: any, cwd = process.cwd()) => {
  if (!options) {
    throw new Error('options is required')
  }
  if (!options.database || !options.database.schema) {
    throw new Error('database.schema is required')
  }
  if (!options.plugins) {
    throw new Error('plugins is required')
  }
  const { database, plugins } = options

  console.log('creating schema.prisma...')
  const isMultiTenant = !!database.multiTenant
  const prismaFilePath = join(cwd, database.schema)
  const userSchemaContent = await fs.readFile(prismaFilePath, 'utf8')
  const info = isMultiTenant
    ? getUrlAndProvider(database.multiTenant.tenants[0].url)
    : getUrlAndProvider(database.url)

  const typegraphqlPrismaPath = `node ${join(
    getNodeModules(),
    '@mrapi/typegraphql-prisma/lib/cli/generator.js',
  )}`
  const TYPE_GRAPHQL_PROVIDER = typegraphqlPrismaPath
  const TYPE_GRAPHQL_OUTPUT =
    plugins['builtIn:graphql']?.options?.buildSchema?.resolvers?.generated ||
    '../src/generated'
  const baseSchemaContent = await fs.readFile(
    join(__dirname, '../../resource/schema.prisma'),
    'utf8',
  )

  // schema.prisma
  const schema =
    '// Generated by mrapi. DO NOT modify it manually.\n' +
    baseSchemaContent.replace('$DB_PROVIDER$', info.provider) +
    '\n' +
    userSchemaContent
  const schemaOutput = join(cwd, database.schemaOutput)
  const outputDir = dirname(schemaOutput)
  if (!(await pathExists(outputDir))) {
    await fs.mkdir(outputDir)
  }
  await fs.writeFile(schemaOutput, schema)
  console.log('schema.prisma created')

  // .env file
  const envPath = join(dirname(database.schemaOutput), '.env')
  let envContent = `# Generated by mrapi. DO NOT modify it manually.
DATABASE_URL="${info.url}"
TYPE_GRAPHQL_PROVIDER="${TYPE_GRAPHQL_PROVIDER}"
TYPE_GRAPHQL_OUTPUT="${TYPE_GRAPHQL_OUTPUT}"
`
  if (isMultiTenant) {
    const managementInfo = getUrlAndProvider(
      database.multiTenant.management.url,
    )
    envContent += `
# The following env variables are used by prisma-multi-tenant
MANAGEMENT_PROVIDER="${managementInfo.provider}"
MANAGEMENT_URL="${managementInfo.url}"
      `
  }
  await fs.writeFile(envPath, envContent)
}

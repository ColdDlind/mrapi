import * as fs from 'fs-extra'
import { join, dirname } from 'path'
import execa, { Options as ExecaOptions } from 'execa'

import { Config } from '../types'
import { resolveFromCurrent, checkPrismaSchema } from './tools'

function getPrismaCli() {
  // return resolveFromCurrent('@prisma/cli/build/index.js')
  return 'prisma'
}

export const runPrisma = async (cmd: string, options?: ExecaOptions) => {
  const prismaCli = getPrismaCli()
  const args = cmd.split(' ').filter(Boolean)
  return execa(prismaCli, args, options)
}

// create schema.prisma file
export const create = async (
  { database, server }: Config,
  cwd = process.cwd(),
) => {
  if (!database || !database.schema) {
    throw new Error('database.schema is required')
  }
  console.log('[mrapi] creating schema.prisma ...')
  const prismaFilePath = join(cwd, database.schema)
  // console.log({ prismaFilePath })
  const userSchemaContent = await fs.readFile(prismaFilePath, 'utf8')

  const URL =
    database.provider === 'sqlite'
      ? database.url || 'file:dev.db'
      : `${database.provider}://${database.user}:${database.password}@${database.host}:${database.port}/${database.database}`
  // const TYPE_GRAPHQL_PROVIDER = resolveFromCurrent(
  //   'typegraphql-prisma/generator.js',
  // )
  const TYPE_GRAPHQL_PROVIDER = 'node_modules/typegraphql-prisma/generator.js'
  const TYPE_GRAPHQL_OUTPUT = server.graphql!.resolvers.generated
  const baseSchemaContent = await fs.readFile(
    join(__dirname, '../../resource/schema.prisma'),
    'utf8',
  )

  const schema =
    '// Generated by mrapi. DO NOT modify it manually.\n' +
    baseSchemaContent.replace('$DB_PROVIDER$', database.provider) +
    '\n' +
    userSchemaContent
  const schemaOutput = join(cwd, database.schemaOutput)
  await fs.outputFile(schemaOutput, schema)
  const envPath = join(dirname(database.schemaOutput), '.env')
  await fs.outputFile(
    envPath,
    `# Generated by mrapi. DO NOT modify it manually.
DB_URL="${URL}"
TYPE_GRAPHQL_PROVIDER="${TYPE_GRAPHQL_PROVIDER}"
TYPE_GRAPHQL_OUTPUT="${TYPE_GRAPHQL_OUTPUT}"
`,
  )
}

export const generate = async (
  { database, server }: Config,
  cwd = process.cwd(),
) => {
  await create({ database, server }, cwd)

  console.log('[mrapi] prisma generate...')
  const envPath = join(dirname(database.schemaOutput), '.env')
  require('dotenv').config({
    path: envPath,
  })
  // console.log(process.env)
  await runPrisma('generate', {})
}

export const migrate = {
  save: async (
    { database, server }: Config,
    cwd = process.cwd(),
    name,
    options = {},
  ) => {
    if (!(await checkPrismaSchema(database, cwd))) {
      await create({ database, server }, cwd)
    }

    console.log('prisma migrate save...')
    const schemaFilePath = join(cwd, database.schemaOutput)
    // console.log({ schemaFilePath })
    await runPrisma(
      `migrate save --create-db --name '' --experimental --schema=${schemaFilePath}`,
      {
        preferLocal: true,
        stdout: 'inherit',
      },
    )
  },
  up: async (
    { database, server }: Config,
    cwd = process.cwd(),
    name,
    options = {},
  ) => {
    if (!(await checkPrismaSchema(database, cwd))) {
      await create({ database, server }, cwd)
    }

    const schemaFilePath = join(cwd, database.schemaOutput)
    console.log('prisma migrate up...')
    await runPrisma(`migrate up --experimental --schema=${schemaFilePath}`, {
      preferLocal: true,
      stdout: 'inherit',
    })
  },
}

export const studio = async (
  { database, server }: Config,
  cwd = process.cwd(),
  options = {},
) => {
  await runPrisma('studio --experimental', {
    preferLocal: true,
    stdout: 'inherit',
  })
}

export const prepare = async (
  { database, server }: Config,
  cwd = process.cwd(),
) => {
  if (!(await checkPrismaSchema(database, cwd))) {
    await generate({ database, server }, cwd)
    await migrate.save({ database, server }, cwd, '')
    await migrate.up({ database, server }, cwd, '')
  }
}

export const getModels = async ({ database }: Config, cwd = process.cwd()) => {
  const models = []
  const schemaPath = join(cwd, database.schemaOutput)
  const content = await fs.readFileSync(schemaPath, 'utf8')
  const lines = content.split(`
`)
  for (let line of lines) {
    const clearedLine = line.replace(/[\n\r]/g, '')
    if (!clearedLine) {
      continue
    }
    const lineArray = clearedLine.split(' ')
    const filteredArray = lineArray.filter(v => v)
    if (filteredArray[0] === 'model' && filteredArray[1]) {
      const name = filteredArray[1]
      if (!models.includes(name)) {
        models.push(name)
      }
    }
  }

  return models
}
